// On my honor:
//
// - I have not used source code obtained from another student,
// or any other unauthorized source, either modified or
// unmodified.
//
// - All source code and documentation used in my program is
// either my original work, or was derived by me from the
// source code published in the textbook for this course.
//
// - I have not discussed coding details about this project with
// anyone other than my partner (in the case of a joint
// submission), instructor, ACM/UPE tutors or the TAs assigned
// to this course. I understand that I may discuss the concepts
// of this program with other students, and that another student
// may help me debug my program so long as neither of us writes
// anything during the discussion or modifies any computer file
// during the discussion. I have violated neither the spirit nor
// letter of this restriction.

import java.io.IOException;
import realtimeweb.earthquakewatchers.WatcherParseException;
import java.util.ArrayList;
import realtimeweb.earthquakeservice.domain.Report;
import java.io.File;

/**
 * Project 2 for CS 3114, fall 2013. This is the main class for the earthquake
 * project, which is in charge of launching all the necessary classes and
 * methods for the earthquake service.
 *
 * @author Elmer Landaverde
 * @version Sept 7, 2013
 */
public class EqSpatial
{

	/**
	 * Public flag used only for testing purposes. If this flag is set to true
	 * and the the main method is run on live mode, then it will only run the
	 * loop once.
	 */
	public static boolean				testingFlag	= false;

	/**
	 * Public flag used only for testing purposes. If there is an error with the
	 * inputs to the main function this flag will be set to true.
	 */
	public static boolean				inputError	= false;

	/**
	 * This Earthquakes object is the handler for all the earthquake information
	 * and queries. It is instantiated in the constructor
	 */
	private static EarthquakeManager	earthquakeManager;

	/**
	 * File name of the text file where the earthquake information will be
	 * obtained from. If the offLineFlag is set to false, then this variable
	 * will be set to NULL.
	 */
	private static String				earthquakesFile;

	/**
	 * Flag used to determine if the earthquake reports will be obtained on-line
	 * or off-line.
	 */
	private static boolean				offLineFlag;

	/**
	 * The amount of milliseconds the program has to wait before making the next
	 * call to the earthquake service if it is running in on line mode.
	 */
	private static long					waitTime	= 300000L;

	/**
	 * This Watchers object is the handler for all the watcher information and
	 * related queries. It is instantiated in the constructor or by the method
	 * createWatcherHandlerForTesting when it is needed for testing purposes.
	 */
	private static WatcherManager		watcherManager;

	/**
	 * File name of the text file where the watcher information will be obtained
	 * from.
	 */
	private static String				watchersFile;


	/**
	 * This method is used for testing purposes. It instantiates a new Watcher
	 * object so that the test case can test the StreamParser class without
	 * having to actually get data from the streams.
	 */
	public static void createWatcherHandlerForTesting()
	{
		watcherManager = new WatcherManager();
	}


	/**
	 * Gets the Earthquakes object that handles all the earthquake events and
	 * information.
	 *
	 * @return Returns an Earthquakes object.
	 */
	public static EarthquakeManager getEarthquakeManager()
	{
		return earthquakeManager;
	}


	/**
	 * Returns the value of the earthquakesFile
	 *
	 * @return The earthquakesFile name.
	 */
	public static String getEarthquakesFile()
	{
		return earthquakesFile;
	}


	/**
	 * Returns the value of the offLineFlag
	 *
	 * @return The offLineFlag.
	 */
	public static boolean getOffLineFlag()
	{
		return offLineFlag;
	}


	/**
	 * Gets the Watchers object that handles all the watcher commands and
	 * information.
	 *
	 * @return Returns a Watchers object.
	 */
	public static WatcherManager getWatcherManager()
	{
		return watcherManager;
	}


	/**
	 * Returns the value of the watchersFile.
	 *
	 * @return The watchersFile name.
	 */
	public static String getWatchersFile()
	{
		return watchersFile;
	}


	/**
	 * Main method for the earthquake service program. It is in charge of
	 * starting all the relevant processes to perform all the operations of the
	 * earthquake service program.
	 *
	 * @param args
	 *            Inputs for the earthquake service. The inputs have to be in
	 *            this format: [--all] <watcher-file> <earthquake-stream>. If
	 *            this is not the case the program will end and output an error
	 *            statement (The --all parameter is optional).
	 * @throws InterruptedException
	 *             Exception generated by the Thread.sleep() method.
	 * @throws WatcherParseException
	 *             Exception generated by the WatcherService.
	 * @throws IOException
	 *             Exception generated by the FileInputStream.
	 */
	public static void main(String[] args)
		throws InterruptedException,
		IOException,
		WatcherParseException
	{
		// Validate inputs.
		if (!validateInputs(args))
		{
			System.out.println("Program ended.");
			inputError = true;
			return;
		}

		// Initialize watcher and earthquake handlers
		watcherManager = new WatcherManager();
		earthquakeManager = new EarthquakeManager();

		// Get streams and process input
		while (StreamManager.hasMoreWatcherCommands())
		{
			// System.out.println("Start");
			// Get the watcher commands and process them.
			ArrayList<String> cmds = StreamManager.getWatcherData(watchersFile);
			StreamManager.parseWatcherCmds(cmds);

			// Get the earthquake report and process them.
			Report report = StreamManager.getEarthquakeData(offLineFlag, earthquakesFile);
			StreamManager.parseEarthquakeReport(report);

			// Make the program sleep before the next iteration if necessary.
			if (testingFlag)
			{
				// If the testing flag is true, then sleep for only one second.
				waitTime = 1000L;
				sleep();
				waitTime = 300000L;
				testingFlag = false;
				break;
			}
			else
			{
				sleep();
			}
		}
		// Reset the watcherHasMoreCommands flag.
		StreamManager.resetWatcherHasMoreCommands();
	}


	/**
	 * Determines if the program is running on off line or on line mode. If on
	 * off line mode, then it returns immediately. Otherwise, it waits for 5
	 * minutes before returning.
	 */
	private static void sleep()
		throws InterruptedException
	{
		if (offLineFlag)
		{
			// If working off line, then no need to wait.
			return;
		}
		else
		{
			// If working on line, then wait for 5 minutes.
			Thread.sleep(waitTime);
		}
	}


	/**
	 * Verifies that the earthquake parameter in the main function is valid. The
	 * earthquake parameter has to contain a valid and existing file name or
	 * "live".
	 *
	 * @return True if the earthquake parameter is valid, false if it is
	 *         invalid.
	 */
	private static boolean validateEarthquakeParameter(String input)
	{
		if (input.equals("live"))
		{
			// If earthquake argument is "live" then set off line mode to false.
			offLineFlag = false;
			earthquakesFile = null;
			return true;
		}
		else
		{
			// Set off line mode to true.
			offLineFlag = true;
			// Validate the file name.
			File es = new File(input);
			if (!es.exists())
			{
				System.out.println("Earthquake file does not exist!");
				return false;
			}
			earthquakesFile = input;
			return true;
		}
	}


	/**
	 * Validates all the inputs passed to the main function.
	 *
	 * @param args
	 *            The arguments passed to the main function. The inputs have to
	 *            be in this format: [--all] <watcher-file> <earthquake-stream>.
	 *            If this is not the case the program will end and output an
	 *            error statement (The --all parameter is optional). The
	 *            watcher-file parameter has to contain a valid file name. The
	 *            earthquake-stream has to contain a valid and existing file
	 *            name, or "live".
	 * @return Returns true if all of the inputs are valid, false if one or more
	 *         of the inputs is invalid.
	 */
	private static boolean validateInputs(String[] args)
	{
		// Validate the inputs
		if (args == null)
		{
			System.out.println("Invalid arguments! Input array is null.");
			return false;
		}
		else if (args.length != 2)
		{
			System.out.println("Invalid arguments! Input array is of invalid length.");
			return false;
		}

		// Validate watcher stream
		if (!validateWatcherParameter(args[0]))
		{
			return false;
		}
		// Validate earthquake stream
		return validateEarthquakeParameter(args[1]);
	}


	/**
	 * Verifies that the watchers parameter in the main function is valid. The
	 * watchers parameter has to contain a valid and existing file name.
	 *
	 * @return True if the watchers parameter is valid, false if it is invalid.
	 */
	private static boolean validateWatcherParameter(String input)
	{
		File ws = new File(input);
		// Validate the file name.
		if (!ws.exists())
		{
			System.out.println("Watcher file does not exist!");
			return false;
		}
		watchersFile = input;
		return true;
	}

}
