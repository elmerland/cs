import realtimeweb.earthquakewatchers.WatcherParseException;
import java.io.IOException;
import java.util.ArrayList;
import realtimeweb.earthquakewatchers.WatcherService;
import java.io.FileInputStream;
import java.io.InputStream;
import realtimeweb.earthquakeservice.domain.History;
import realtimeweb.earthquakeservice.domain.Threshold;
import realtimeweb.earthquakeservice.exceptions.EarthquakeException;
import realtimeweb.earthquakeservice.domain.Report;
import realtimeweb.earthquakeservice.regular.EarthquakeService;

// -------------------------------------------------------------------------
/**
 * The StreamReader class is in charge of getting the input from the Earthquake
 * service. This class is just responsible for getting the input and reporting
 * it back in the format that it's obtained in.
 *
 * @author Elmer Landaverde, Harjas Singh
 * @version Sept 5, 2013
 */
public class StreamReader
{
    /**
     * Flag that denotes if the watcher service has no more commands to be
     * retrieved.
     */
    private static boolean hasMoreCommands = true;


    /**
     * Determines if the watcher service has no more commands to be retrieved.
     *
     * @return True if the watcher service has no more commands to be retrieved,
     *         false if the watcher service still have more commands to be
     *         retrieved.
     */
    public static boolean hasMoreWatcherCommands()
    {
        return hasMoreCommands;
    }


    /**
     * Method included for testing purposes. This sets the hasMoreCommands flag
     * to true, that way the main method in the EqSimple class can be called
     * again and it will continue to get new commands.
     */
    public static void resetWatcherHasMoreCommands()
    {
        hasMoreCommands = true;
    }


    /**
     * Gets the earthquake data from the indicated source.
     *
     * @param offLine
     *            If true, data will be obtained from a local file. If false,
     *            data will be obtained from the on line earthquake service.
     * @param fileName
     *            The file name corresponding to the local file where the
     *            earthquake information will be obtained from if the offLine
     *            flag is set to false.
     * @return A report of all the earthquakes that have occurred.
     */
    public static Report getEarthquakeData(boolean offLine, String fileName)
    {
        try
        {
            if (offLine)
            {
                return StreamReader.getOffLineEarthquakeData(fileName);
            }
            else
            {
                return StreamReader.getOnLineEarthquakeData();
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return null;
        }
    }


    /**
     * Obtains the earthquake information from the indicated local file.
     *
     * @param fileName
     *            The name of the local file from where the earthquake
     *            information will be obtained from.
     * @return A Report object containing the earthquake information. Returns
     *         null if the file could not be found, if file could not be read,
     *         or if earthquake information could be obtained.
     * @throws IOException
     *             Exception generated by the FileInputStream
     * @throws EarthquakeException
     *             Exception generated by the EarthquakeService.
     */
    private static Report getOffLineEarthquakeData(String fileName)
        throws IOException,
        EarthquakeException
    {
        InputStream normalEarthquakes = new FileInputStream(fileName);
        EarthquakeService earthquakeService =
            EarthquakeService.getInstance(normalEarthquakes);
        Report latestQuakes =
            earthquakeService.getEarthquakes(Threshold.ALL, History.HOUR);
        return latestQuakes;
    }


    /**
     * Obtains earthquake information from the on-line earthquake service.
     *
     * @return A Report object containing the earthquake information. Returns
     *         null if the earthquake information could not be obtained.
     * @throws EarthquakeException
     *             Exception geenrated by the EarthquakeService.
     */
    private static Report getOnLineEarthquakeData()
        throws EarthquakeException
    {
        EarthquakeService earthquakeService = EarthquakeService.getInstance();

        Report latestQuakes =
            earthquakeService.getEarthquakes(Threshold.ALL, History.HOUR);
        return latestQuakes;
    }


    /**
     * Obtain watcher commands from the indicated local file.
     *
     * @param fileName
     *            The file name of the text file where the watcher information
     *            is stored.
     * @return An ArrayList object of Strings, that contains a list of new
     *         commands. Returns null if the file could not be found, if the
     *         file could not be read, or watcher information could be obtained.
     * @throws WatcherParseException
     *             Exception generated by the WatcherService
     * @throws IOException
     *             Exception generated by the FileInputStream
     */
    public static ArrayList<String> getWatcherData(String fileName)
        throws IOException,
        WatcherParseException
    {
        InputStream watcherCommandFile = new FileInputStream(fileName);
        WatcherService watcherService =
            WatcherService.getInstance(watcherCommandFile);
        ArrayList<String> newCommands = watcherService.getNextCommands();
        // Check if the watcher service still has more commands.
        if (!watcherService.hasCommands())
        {
            hasMoreCommands = false;
        }
        return newCommands;
    }
}
